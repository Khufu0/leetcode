#!/usr/bin/python3

from enum import Enum
from subprocess import run, CalledProcessError
from argparse import ArgumentParser
from os import abort, getenv, path


class Lang(Enum):
    CXX = 0
    JAVA = 1
    JS = 2
    PY = 3


def run_cmd(cmd: str) -> None:
    try:
        run(cmd, shell=True, check=True)
    except CalledProcessError as e:
        print(f"{str(e)}")
        abort()


def get_lang(file: str) -> Lang:
    ext = path.splitext(file)[1]
    if ext == ".py":
        return Lang.PY
    elif ext == ".js":
        return Lang.JS
    elif ext == ".java":
        return Lang.JAVA
    return Lang.CXX


def rm_extension(file: str) -> str:
    if file.find(".") != -1:
        return path.splitext(file)[0]
    else:
        return file


def build_cpp(file: str, release: bool, clean: bool) -> str:
    target = rm_extension(file)
    if clean is True:
        run_cmd("rm build -rf")
    if not path.isdir("build/"):
        run_cmd("mkdir build/")
    args = f"{"-O2" if release else "-g"} -Wall -Wextra -Wpedantic -std=c++20"
    compiler = getenv("CXX")
    compiler = "g++" if compiler is None else compiler  # cvss 6.9
    run_cmd(f"{compiler} {file} -o build/{target} {args}")
    return target


parser = ArgumentParser(prog="runner")
parser.add_argument(
    "target",
)
# general args
parser.add_argument(
    "-b",
    "--benchmark",
    action="store_true",
    default=False,
    help="time execution",
)
# cmake specific args
parser.add_argument(
    "--release",
    action="store_true",
    default=False,
    help="cmake release build",
)
parser.add_argument(
    "-c",
    "--clean",
    action="store_true",
    default=False,
    help="clean cmake build",
)
args = parser.parse_args()

time = f"{"time " if args.benchmark else ""}"
match get_lang(args.target):
    case Lang.CXX:
        target = build_cpp(args.target, args.release, args.clean)
        run_cmd(f"{time}build/{target}")
    case Lang.JAVA:
        run_cmd(f"{time}java {args.target}")
    case Lang.JS:
        run_cmd(f"{time}node {args.target}")
    case Lang.PY:
        run_cmd(f"{time}python3 {args.target}")
